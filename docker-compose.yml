# yaml-language-server: $schema=https://json.schemastore.org/docker-compose.json
## version: '3.8' (removed as obsolete)
# 공통 서비스 정의 (dev/prod에서 override)
services:
  cc_zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: cc_zookeeper
    # ports:
    #   - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
    networks:
      - ccnet

  cc_kafka:
    image: bitnami/kafka:3.6.0
    container_name: cc_kafka
    ports:
      - "9093:9093"
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_CFG_ZOOKEEPER_CONNECT: cc_zookeeper:2181
      KAFKA_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - cc_zookeeper
    networks:
      - ccnet
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9093", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:14
    container_name: cc_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-cc_webapp}
      POSTGRES_USER: ${DB_USER:-cc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cc_password}
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./backend/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ccnet
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-cc_user} -d ${DB_NAME:-cc_webapp}" ]
      interval: 30s
      timeout: 10s
      retries: 3


  redis:
    image: redis:7
    container_name: cc_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ccnet
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3


  # Backend API
  backend:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cc_kafka:
        condition: service_healthy
    environment:
      # 데이터베이스 설정
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_password}

      # Redis 설정
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Kafka 설정
      KAFKA_BOOTSTRAP_SERVERS: cc_kafka:9093

      # JWT 설정
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-here}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 30

      # 앱 설정
      APP_ENV: ${APP_ENV:-development}
      DEBUG: ${DEBUG:-true}

      # 사이버 토큰 설정
      INITIAL_CYBER_TOKENS: 200

      # 본사 사이트 연동 설정
      CORPORATE_SITE_URL: ${CORPORATE_SITE_URL:-http://localhost:8080}
      CORPORATE_API_KEY: ${CORPORATE_API_KEY:-test-api-key}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./cc-webapp/backend:/app
      - backend_logs:/app/logs
    networks:
      - ccnet
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/docs')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./cc-webapp/frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./cc-webapp/frontend:/app
      - /app/node_modules
      - /app/.next

  # Celery Worker (백그라운드 작업)
  celery-worker:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: celery -A app.core.celery_app worker --loglevel=info
    volumes:
      - ./cc-webapp/backend:/app

  # Celery Beat (스케줄러)
  celery-beat:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: celery -A app.core.celery_app beat --loglevel=info
    volumes:
      - ./cc-webapp/backend:/app

volumes:
  pgdata:
  redis_data:
  kafka_data:
  backend_logs:


networks:
  ccnet:
