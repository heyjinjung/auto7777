# yaml-language-server: $schema=https://json.schemastore.org/docker-compose.json
## version: '3.8' (removed as obsolete)
# 공통 서비스 정의 (dev/prod에서 override)

services:
  cc_zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: cc_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  cc_kafka:
    image: bitnami/kafka:3.6.0
    container_name: cc_kafka
    ports:
      - "${KAFKA_HOST_PORT:-9093}:9093"
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_CFG_ZOOKEEPER_CONNECT: cc_zookeeper:2181
      KAFKA_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      cc_zookeeper:
        condition: service_healthy
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9093", "--list"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:14
    container_name: cc_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-cc_webapp}
      POSTGRES_USER: ${DB_USER:-cc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cc_secret_password_2025}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./data/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cc_user} -d ${DB_NAME:-cc_webapp}"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7
    container_name: cc_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s


  # Backend API
  backend:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    container_name: cc_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cc_kafka:
        condition: service_healthy
    env_file:
      - .env.development
    environment:
      # 데이터베이스 설정
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_secret_password_2025}

      # Redis 설정
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Kafka 설정
      KAFKA_BOOTSTRAP_SERVERS: cc_kafka:9093

      # JWT 설정
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-casino_club_jwt_secret_key_20250802_very_secure}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 30

      # 앱 설정
      APP_ENV: ${APP_ENV:-development}
      DEBUG: ${DEBUG:-true}

      # 사이버 토큰 설정
      INITIAL_CYBER_TOKENS: ${INITIAL_CYBER_TOKENS:-200}

      # 본사 사이트 연동 설정
      CORPORATE_SITE_URL: ${CORPORATE_SITE_URL:-http://localhost:8080}
      CORPORATE_API_KEY: ${CORPORATE_API_KEY:-test_api_key_20250802}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./cc-webapp/backend:/app
      - backend_logs:/app/logs
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./cc-webapp/frontend
      dockerfile: Dockerfile
    container_name: cc_frontend
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env.development
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${BACKEND_PORT:-8000}
      NEXT_PUBLIC_WS_URL: ws://localhost:${BACKEND_PORT:-8000}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./cc-webapp/frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # === 백그라운드 작업 서비스 (프로필: celery) ===
  # Celery Worker (백그라운드 작업)
  celery-worker:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    container_name: cc_celery_worker
    profiles:
      - celery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.development
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_secret_password_2025}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: celery -A app.core.celery_app worker --loglevel=info
    volumes:
      - ./cc-webapp/backend:/app
      - celery_logs:/app/logs
    networks:
      - ccnet
    restart: unless-stopped

  # Celery Beat (스케줄러)
  celery-beat:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    container_name: cc_celery_beat
    profiles:
      - celery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.development
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_secret_password_2025}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: celery -A app.core.celery_app beat --loglevel=info
    volumes:
      - ./cc-webapp/backend:/app
      - celery_logs:/app/logs
    networks:
      - ccnet
    restart: unless-stopped

  # === 개발 도구 (프로필: tools) ===
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cc_pgadmin
    profiles:
      - tools
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@casino-club.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ccnet
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cc_redis_commander
    profiles:
      - tools
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - ccnet
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cc_kafka_ui
    profiles:
      - tools
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: cc_kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: cc_zookeeper:2181
    ports:
      - "8082:8080"
    networks:
      - ccnet
    depends_on:
      cc_kafka:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  backend_logs:
    driver: local
  celery_logs:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  pgadmin_data:
    driver: local

networks:
  ccnet:
    driver: bridge
    name: casino_club_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
