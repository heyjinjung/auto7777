version: '3.8'

services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:13-alpine
    container_name: cc_postgres_dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cc_password}
      POSTGRES_DB: ${POSTGRES_DB:-cc_webapp_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"  # 외부 접근 가능
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cc_user} -d ${POSTGRES_DB:-cc_webapp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: cc_redis_dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # 백엔드 API 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cc_backend_dev
    environment:
      # 데이터베이스 설정
      DATABASE_URL: "postgresql://${POSTGRES_USER:-cc_user}:${POSTGRES_PASSWORD:-cc_password}@db:5432/${POSTGRES_DB:-cc_webapp_db}"
      
      # Redis 설정
      REDIS_URL: "redis://redis:6379/0"
      
      # JWT 시크릿
      JWT_SECRET: ${JWT_SECRET:-dev_secret_key_change_in_production}
      
      # 환경 설정
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      
      # CORS 설정 (개발용)
      CORS_ORIGINS: "*"
      
      # 포트 설정
      PORT: 8000
      
      # 로그 레벨
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    ports:
      - "${BACKEND_PORT:-8000}:8000"  # 외부 접근 가능
    volumes:
      - ./backend:/app
      - /app/venv  # 가상환경 볼륨 마운트 제외
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    command: >
      sh -c "
        echo '🚀 백엔드 개발 서버 시작 중...' &&
        python -m uvicorn app.main:app 
        --host 0.0.0.0 
        --port 8000 
        --reload 
        --reload-dir /app
        --log-level info
      "

  # 프론트엔드 개발 서버 (옵션)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: cc_frontend_dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - NODE_ENV=development
      - PORT=3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"  # 외부 접근 가능
    volumes:
      - ./frontend:/app
      - /app/node_modules  # node_modules 볼륨 마운트 제외
      - /app/.next  # .next 볼륨 마운트 제외
    depends_on:
      - backend
    restart: unless-stopped
    command: >
      sh -c "
        echo '🎨 프론트엔드 개발 서버 시작 중...' &&
        npm run dev
      "

  # Adminer (데이터베이스 관리 도구)
  adminer:
    image: adminer:latest
    container_name: cc_adminer_dev
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: cc_dev_network
