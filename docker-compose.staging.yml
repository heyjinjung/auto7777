# Staging Environment Docker Compose Configuration
version: '3.8'

services:
  # Backend Staging Configuration
  backend:
    container_name: cc_backend_staging
    environment:
      - PYTHONOPTIMIZE=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - WORKERS=2
      - APP_ENV=staging
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./logs/backend:/app/logs:rw
    networks:
      - ccnet
    restart: unless-stopped
    command: >
      sh -c "
        echo '[*] Starting Backend Staging Server...' &&
        gunicorn app.main:app -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 --timeout 30
      "

  # Frontend Staging Configuration
  frontend:
    build:
      context: ./cc-webapp/frontend
      dockerfile: Dockerfile
      target: runner
    container_name: cc_frontend_staging
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${STAGING_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_WS_URL=${STAGING_WS_URL:-ws://localhost:8000}
    volumes:
      - ./logs/frontend:/app/logs:rw
    networks:
      - ccnet
    restart: unless-stopped

  # PostgreSQL Staging Configuration
  postgres:
    container_name: cc_postgres_staging
    environment:
      - POSTGRES_DB=${DB_NAME:-cc_webapp_staging}
      - POSTGRES_USER=${DB_USER:-cc_user_staging}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-staging_password}
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql:rw
    networks:
      - ccnet
    restart: unless-stopped

  # Redis Staging Configuration
  redis:
    container_name: cc_redis_staging
    volumes:
      - redis_data_staging:/data
    networks:
      - ccnet
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Monitoring - Prometheus (Staging)
  prometheus:
    image: prom/prometheus:latest
    container_name: cc_prometheus_staging
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_staging:/prometheus
    networks:
      - ccnet
    profiles:
      - monitoring

  # Log aggregation - Loki (Staging)
  loki:
    image: grafana/loki:latest
    container_name: cc_loki_staging
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data_staging:/loki
    networks:
      - ccnet
    profiles:
      - monitoring

volumes:
  postgres_data_staging:
    driver: local
  redis_data_staging:
    driver: local
  prometheus_data_staging:
    driver: local
  loki_data_staging:
    driver: local

networks:
  ccnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
