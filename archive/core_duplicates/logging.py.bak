"""
로깅 설정 및 미들웨어
Casino-Club F2P 백엔드 로깅 시스템
"""
import logging
import json
import time
from typing import Dict, Any, Optional
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp
import uuid
from contextvars import ContextVar

# 로깅 컨텍스트 변수
request_id_var: ContextVar[str] = ContextVar('request_id', default='')

class LoggingContextMiddleware(BaseHTTPMiddleware):
    """
    요청별 컨텍스트 로깅 미들웨어
    """
    
    def __init__(self, app: ASGIApp):
        super().__init__(app)

    async def dispatch(self, request: Request, call_next):
        # 요청 ID 생성
        request_id = str(uuid.uuid4())
        request_id_var.set(request_id)
        
        # 요청 시작 시간
        start_time = time.time()
        
        # 요청 로깅
        logger = logging.getLogger("casino_club.requests")
        logger.info(f"Request started: {request.method} {request.url}", extra={
            "request_id": request_id,
            "method": request.method,
            "url": str(request.url),
            "client_ip": request.client.host if request.client else "unknown"
        })
        
        try:
            # 응답 처리
            response = await call_next(request)
            
            # 응답 시간 계산
            process_time = time.time() - start_time
            
            # 응답 로깅
            logger.info(f"Request completed: {response.status_code}", extra={
                "request_id": request_id,
                "status_code": response.status_code,
                "process_time": process_time
            })
            
            return response
            
        except Exception as e:
            # 에러 로깅
            process_time = time.time() - start_time
            logger.error(f"Request failed: {str(e)}", extra={
                "request_id": request_id,
                "error": str(e),
                "process_time": process_time
            })
            raise


class CustomFormatter(logging.Formatter):
    """
    커스텀 로그 포맷터
    """
    
    def format(self, record):
        # 요청 ID 추가
        record.request_id = request_id_var.get()
        
        # 기본 포맷
        log_format = "[%(asctime)s] [%(levelname)s] [%(name)s] [%(request_id)s] %(message)s"
        formatter = logging.Formatter(log_format)
        
        return formatter.format(record)


def setup_logging(level: str = "INFO") -> None:
    """
    로깅 설정 초기화
    
    Args:
        level: 로그 레벨 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    """
    # 로그 레벨 설정
    log_level = getattr(logging, level.upper(), logging.INFO)
    
    # 루트 로거 설정
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    
    # 핸들러 중복 방지
    if root_logger.handlers:
        root_logger.handlers.clear()
    
    # 콘솔 핸들러
    console_handler = logging.StreamHandler()
    console_handler.setLevel(log_level)
    console_handler.setFormatter(CustomFormatter())
    
    # 파일 핸들러 (선택적)
    try:
        import os
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
            
        file_handler = logging.FileHandler(f"{log_dir}/casino_club.log", encoding='utf-8')
        file_handler.setLevel(log_level)
        file_handler.setFormatter(CustomFormatter())
        root_logger.addHandler(file_handler)
    except Exception:
        # 파일 로깅 실패시 무시
        pass
    
    # 핸들러 추가
    root_logger.addHandler(console_handler)
    
    # 특정 로거 설정
    loggers_config = {
        "casino_club": log_level,
        "casino_club.services": log_level,
        "casino_club.api": log_level,
        "casino_club.requests": log_level,
        "uvicorn.access": logging.WARNING,  # 액세스 로그 줄이기
        "sqlalchemy.engine": logging.WARNING,  # SQL 로그 줄이기
    }
    
    for logger_name, logger_level in loggers_config.items():
        logger = logging.getLogger(logger_name)
        logger.setLevel(logger_level)


def get_logger(name: str) -> logging.Logger:
    """
    로거 인스턴스 생성
    
    Args:
        name: 로거 이름
        
    Returns:
        로거 인스턴스
    """
    return logging.getLogger(f"casino_club.{name}")


def log_service_call(service_name: str, method_name: str, **kwargs) -> None:
    """
    서비스 호출 로깅
    
    Args:
        service_name: 서비스 이름
        method_name: 메서드 이름
        **kwargs: 추가 로그 데이터
    """
    logger = get_logger("services")
    logger.info(f"Service call: {service_name}.{method_name}", extra={
        "service": service_name,
        "method": method_name,
        "request_id": request_id_var.get(),
        **kwargs
    })


def log_database_operation(operation: str, table: str, **kwargs) -> None:
    """
    데이터베이스 작업 로깅
    
    Args:
        operation: 작업 유형 (CREATE, READ, UPDATE, DELETE)
        table: 테이블 이름
        **kwargs: 추가 로그 데이터
    """
    logger = get_logger("database")
    logger.info(f"DB operation: {operation} on {table}", extra={
        "operation": operation,
        "table": table,
        "request_id": request_id_var.get(),
        **kwargs
    })


def log_error(error: Exception, context: Dict[str, Any] = None) -> None:
    """
    에러 로깅
    
    Args:
        error: 에러 객체
        context: 추가 컨텍스트 정보
    """
    logger = get_logger("errors")
    logger.error(f"Error occurred: {str(error)}", extra={
        "error_type": type(error).__name__,
        "error_message": str(error),
        "request_id": request_id_var.get(),
        "context": context or {}
    }, exc_info=True)


# 편의 함수들
def log_user_action(user_id: int, action: str, **kwargs) -> None:
    """사용자 액션 로깅"""
    logger = get_logger("user_actions")
    logger.info(f"User action: {action}", extra={
        "user_id": user_id,
        "action": action,
        "request_id": request_id_var.get(),
        **kwargs
    })


def log_game_event(game_type: str, event: str, **kwargs) -> None:
    """게임 이벤트 로깅"""
    logger = get_logger("game_events")
    logger.info(f"Game event: {game_type} - {event}", extra={
        "game_type": game_type,
        "event": event,
        "request_id": request_id_var.get(),
        **kwargs
    })


def log_reward_event(reward_type: str, amount: float, **kwargs) -> None:
    """리워드 이벤트 로깅"""
    logger = get_logger("rewards")
    logger.info(f"Reward event: {reward_type} - {amount}", extra={
        "reward_type": reward_type,
        "amount": amount,
        "request_id": request_id_var.get(),
        **kwargs
    })
