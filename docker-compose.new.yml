version: '3.8'

services:
  # ===== Database Services =====
  postgres:
    image: postgres:14
    container_name: cc_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-cc_webapp}
      POSTGRES_USER: ${DB_USER:-cc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cc_password}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./data/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cc_user} -d ${DB_NAME:-cc_webapp}"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7
    container_name: cc_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ===== Message Queue Services =====
  cc_zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: cc_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  cc_kafka:
    image: bitnami/kafka:3.6.0
    container_name: cc_kafka
    ports:
      - "${KAFKA_HOST_PORT:-9093}:9093"
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_CFG_ZOOKEEPER_CONNECT: cc_zookeeper:2181
      KAFKA_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      cc_zookeeper:
        condition: service_healthy
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9093", "--list"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ===== Application Services =====
  backend:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile.dev
    container_name: cc_backend
    env_file:
      - ./.env.development
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-cc_user}:${DB_PASSWORD:-cc_password}@postgres:5432/${DB_NAME:-cc_webapp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=cc_kafka:9093
    volumes:
      - ./cc-webapp/backend:/app
      - ./logs/backend:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cc_kafka:
        condition: service_healthy
    networks:
      - ccnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  frontend:
    build:
      context: ./cc-webapp/frontend
      dockerfile: Dockerfile.dev
    container_name: cc_frontend
    env_file:
      - ./.env.development
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-8000}
    volumes:
      - ./cc-webapp/frontend:/app
      - /app/node_modules
      - /app/.next
      - ./logs/frontend:/app/logs
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - ccnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  # ===== Background Workers =====
  celery_worker:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile.dev
    container_name: cc_celery_worker
    command: celery -A app.worker.celery worker --loglevel=info
    env_file:
      - ./.env.development
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-cc_user}:${DB_PASSWORD:-cc_password}@postgres:5432/${DB_NAME:-cc_webapp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=cc_kafka:9093
    volumes:
      - ./cc-webapp/backend:/app
      - ./logs/celery:/app/logs
    depends_on:
      - backend
      - redis
    networks:
      - ccnet
    restart: unless-stopped

  celery_beat:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile.dev
    container_name: cc_celery_beat
    command: celery -A app.worker.celery beat --loglevel=info
    env_file:
      - ./.env.development
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-cc_user}:${DB_PASSWORD:-cc_password}@postgres:5432/${DB_NAME:-cc_webapp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    volumes:
      - ./cc-webapp/backend:/app
      - ./logs/celery:/app/logs
    depends_on:
      - celery_worker
    networks:
      - ccnet
    restart: unless-stopped

  # ===== Development Tools (profiles) =====
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cc_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@casino-club.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - ccnet
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: cc_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-redis_password}
    ports:
      - "8081:8081"
    networks:
      - ccnet
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cc_kafka_ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=cc_kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=cc_kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=cc_zookeeper:2181
    ports:
      - "8082:8080"
    networks:
      - ccnet
    depends_on:
      - cc_kafka
    restart: unless-stopped
    profiles:
      - tools

networks:
  ccnet:
    name: casino_club_network

volumes:
  pgdata:
  redis_data:
  pgadmin_data:
