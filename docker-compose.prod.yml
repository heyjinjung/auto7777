# üöÄ ÌîÑÎ°úÎçïÏÖòÏö© Docker Compose ÏÑ§Ï†ï
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up ÏúºÎ°ú Ïã§Ìñâ

# yaml-language-server: $schema=https://json.schemastore.org/docker-compose.json
version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: cc_postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/init-db:/docker-entrypoint-initdb.d
    ports: [] # ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî Ìè¨Ìä∏ ÎÖ∏Ï∂ú ÏïàÌï®
    networks:
      - ccnet

  redis:
    image: redis:7
    container_name: cc_redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports: []
    volumes:
      - redis_data:/data
    networks:
      - ccnet

  kafka:
    image: bitnami/kafka:3.5
    container_name: cc_kafka
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports: []
    depends_on:
      - zookeeper
    networks:
      - ccnet

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: cc_zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
    ports: []
    networks:
      - ccnet

  backend:
    build: ./backend
    container_name: cc_backend_prod
    restart: always
    environment:
      APP_ENV: production
      DEBUG: false
      PYTHONUNBUFFERED: 1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 30
      INITIAL_CYBER_TOKENS: 200
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - backend_logs:/app/logs
    networks:
      - ccnet

  # Celery Beat ÌîÑÎ°úÎçïÏÖò ÏÑ§Ï†ï
  celery-beat:
    build: ./backend
    container_name: cc_celery_beat_prod
    restart: always
    command: celery -A app.main beat --loglevel=info
    environment:
      APP_ENV: production
      DEBUG: false
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    depends_on:
      - postgres
      - redis
    volumes:
      - backend_logs:/app/logs
    networks:
      - ccnet

  # Nginx Î¶¨Î≤ÑÏä§ ÌîÑÎ°ùÏãú (ÌîÑÎ°úÎçïÏÖò Ï†ÑÏö©)
  nginx:
    image: nginx:alpine
    container_name: cc_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - ccnet

networks:
  ccnet:
    driver: bridge

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
