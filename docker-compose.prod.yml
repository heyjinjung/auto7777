# Production Environment Docker Compose Configuration
version: '3.8'

services:
  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: cc_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
      - ./static:/var/www/static:ro
    networks:
      - ccnet
    depends_on:
      - frontend
      - backend
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d

  # Backend Production Configuration
  backend:
    container_name: cc_backend_prod
    restart: always
    environment:
      - PYTHONOPTIMIZE=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - WORKERS=4
    volumes:
      - ./logs/backend:/app/logs:rw
      - ./static:/app/static:rw
    networks:
      - ccnet
    command: >
      sh -c "
        echo 'üöÄ Starting Backend Production Server...' &&
        gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 --max-requests 1000 --max-requests-jitter 100 --preload --timeout 30
      "
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend Production Configuration
  frontend:
    container_name: cc_frontend_prod
    restart: always
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs/frontend:/app/logs:rw
    networks:
      - ccnet
    command: >
      sh -c "
        echo 'üé® Starting Frontend Production Server...' &&
        npm run build &&
        npm run start
      "
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # PostgreSQL Production Configuration
  postgres:
    container_name: cc_postgres_prod
    restart: always
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups:rw
      - ./logs/postgres:/var/log/postgresql:rw
    networks:
      - ccnet
    environment:
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Production Configuration
  redis:
    container_name: cc_redis_prod
    restart: always
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ccnet
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Kafka Production Configuration (if needed)
  cc_kafka:
    container_name: cc_kafka_prod
    restart: always
    volumes:
      - kafka_data_prod:/var/lib/kafka/data
    networks:
      - ccnet
    environment:
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Celery Worker Production Configuration
  celery-worker:
    container_name: cc_celery_worker_prod
    restart: always
    environment:
      - PYTHONOPTIMIZE=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs/celery:/app/logs:rw
    networks:
      - ccnet
    command: >
      sh -c "
        echo 'üîÑ Starting Celery Worker (Production)...' &&
        celery -A app.core.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
      "
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery Beat Production Configuration
  celery-beat:
    container_name: cc_celery_beat_prod
    restart: always
    environment:
      - PYTHONOPTIMIZE=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs/celery:/app/logs:rw
    networks:
      - ccnet
    command: >
      sh -c "
        echo '‚è∞ Starting Celery Beat (Production)...' &&
        celery -A app.core.celery_app beat --loglevel=info
      "
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cc_prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ccnet
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cc_grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    networks:
      - ccnet
    profiles:
      - monitoring

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  kafka_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ccnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16
